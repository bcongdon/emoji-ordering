// +build ignore
// Strongly influenced by this blog post: https://blog.carlmjohnson.net/post/2016-11-27-how-to-use-go-generate/

package main

import (
	"bufio"
	"bytes"
	"encoding/binary"
	"encoding/hex"
	"html/template"
	"log"
	"net/http"
	"os"
	"regexp"
	"strings"
	"time"
)

const url = "http://unicode.org/emoji/charts/emoji-ordering.txt"

var codepointRegex *regexp.Regexp = regexp.MustCompile(`U\+[A-F,0-9]{4,5}`)
var commentRegex *regexp.Regexp = regexp.MustCompile(`#\s(.*)`)

func padBytes(arr []byte, size int) []byte {
	return append(bytes.Repeat([]byte{0}, size-len(arr)), arr...)
}

func assembleCodepoints(codepoints []string) string {
	var output string

	for _, codepointStr := range codepoints {
		// Strip "U+"" from codepoint
		codepointStr = codepointStr[2:]

		if len(codepointStr)%2 == 1 {
			codepointStr = "0" + codepointStr
		}
		decoded, err := hex.DecodeString(codepointStr)
		die(err)

		var codepoint int32
		binary.Read(bytes.NewReader(padBytes(decoded, 4)), binary.BigEndian, &codepoint)

		output += string(rune(codepoint))
	}

	return output
}

type emojiInfo struct {
	Char    string
	Comment string
}

func main() {
	resp, err := http.Get(url)
	die(err)
	defer resp.Body.Close()

	sc := bufio.NewScanner(resp.Body)

	emojis := []emojiInfo{}
	for sc.Scan() {
		if strings.HasPrefix(sc.Text(), "U") {
			codepoints := codepointRegex.FindAllString(sc.Text(), -1)
			comment := commentRegex.FindStringSubmatch(sc.Text())[1]

			emojis = append(emojis, emojiInfo{
				Char:    assembleCodepoints(codepoints),
				Comment: comment,
			})
		}
	}

	die(sc.Err())

	f, err := os.Create("emoji_ordering.go")
	die(err)
	defer f.Close()

	packageTemplate.Execute(f, struct {
		Timestamp time.Time
		URL       string
		Emojis    []emojiInfo
	}{
		Timestamp: time.Now(),
		URL:       url,
		Emojis:    emojis,
	})
}

func die(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated at
// {{ .Timestamp }}
// using data from
// {{ .URL }}
package ordering

var Emojis = []string{
{{- range .Emojis }}
	"{{ print .Char }}",	// {{ print .Comment }}
{{- end }}
}
`))
